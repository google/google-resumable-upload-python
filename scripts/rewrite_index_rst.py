# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Rewrite the index.rst file generated by sphinx-apidoc.

This is **primarily** so that the base package RST can be
re-purposed as ``index.rst``. It is also done
so that entries in ``__all__`` for the package
don't get documented twice.

This file is expected to be the file generated for the base
module ``google/resumable_media/__init__.py``.
"""

import os
import types

try:
    from google import resumable_media
except ImportError:
    resumable_media = None


_BASE_PACKAGE = 'google.resumable_media'
_EXPECTED_SUBMODULE_LINES = (
    '',
    'Submodules',
    '----------',
    '',
    '.. toctree::',
    '',
)
_EXPECTED_AUTOMODULE_LINES = (
    '',
    '.. automodule:: google.resumable_media',
    '   :members:',
    '   :inherited-members:',
    '   :undoc-members:',
    '   :show-inheritance:',
    '',
)
_CURR_DIR = os.path.dirname(__file__)
DOCS_DIR = os.path.abspath(os.path.join(_CURR_DIR, '..', 'docs_build'))
INDEX_FILE = os.path.join(DOCS_DIR, 'index.rst')
COMMON_FILE = os.path.join(DOCS_DIR, 'google.resumable_media.common.rst')


def public_members():
    """Get public members in :mod:`google.resumable_media` package.

    Returns:
        list: List of all public members **defined** in the
        main package.
    """
    if resumable_media is None:
        return []

    members = []
    for name in dir(resumable_media):
        # Filter out non-public.
        if name.startswith('_'):
            continue
        value = getattr(resumable_media, name)
        # Filter out imported modules.
        if isinstance(value, types.ModuleType):
            continue
        # Only keep values defined in the base package.
        home = getattr(value, '__module__', _BASE_PACKAGE)
        if home == _BASE_PACKAGE:
            members.append(name)

    return members


def rewrite_title(lines, expected_title, rewritten_title):
    """Rewrite the title of a .rst file.

    Args:
        lines (List[str]): lines of the file.
        expected_title (str): title expected to be generated by apidoc
        rewritten_title (str): title to replace

    Returns
        List[str]: rewritten title lines.

    Raises
        ValueError: If the title '==...==' isn't on line 1.
        ValueError: If the title isn't the expected value.
    """
    rewritten_content = []

    # Find the title header **and** assert there is only one '==...==' line.
    title_index, = [i for i, line in enumerate(lines) if set(line) == set('=')]
    if title_index != 1:
        raise ValueError('Unexpected title line', title_index)
    if lines[0] != expected_title:
        raise ValueError('Unexpected title content', lines[0])

    rewritten_content.append(rewritten_title)
    rewritten_content.append('=' * len(rewritten_title))

    return rewritten_content


def rewrite_index_rst():
    """Rewrite the index.rst file.

    Raises:
        ValueError: If the submodules don't start on line 4.
        ValueError: If the submodules header is unexpected.
        ValueError: If the module header is unexpected.
        ValueError: If the toctree doesn't begin as expected.
    """

    with open(INDEX_FILE, 'r') as file_obj:
        contents = file_obj.read()

    lines = contents.split('\n')

    expected_title = r'google.resumable\_media package'
    rewritten_title = '``google.resumable_media``'
    rewritten_content = rewrite_title(lines, expected_title, rewritten_title)

    # Assert there are only three '--...--' lines.
    subpkg_index, submod_index, mod_index = [
        i for i, line in enumerate(lines) if set(line) == set('-')]

    # Handle subpackage section.
    if subpkg_index != 4:
        raise ValueError('Unexpected subpackages line', subpkg_index)
    if lines[2:8] != ['', 'Subpackages', lines[4], '', '.. toctree::', '']:
        raise ValueError('Unexpected subpackages header', lines[2:8])
    subpkg_lines = [line.strip() for line in lines[8:submod_index - 2]]

    # Handle submodule section.
    submod_begin = tuple(lines[submod_index - 2:submod_index + 4])
    if submod_begin != _EXPECTED_SUBMODULE_LINES:
        raise ValueError('Unexpected submodules content', submod_begin)
    submod_lines = [
        line.strip() for line in lines[submod_index + 4:mod_index - 2]]

    # Handle module/automodule section.
    if lines[mod_index - 2:mod_index] != ['', 'Module contents']:
        raise ValueError(
            'Unexpected module header', lines[mod_index - 2:mod_index])
    if tuple(lines[mod_index + 1:]) != _EXPECTED_AUTOMODULE_LINES:
        raise ValueError('Unexpected automodule content',
                         lines[mod_index + 1:])
    automodule_lines = [
        '',
        '.. automodule:: google.resumable_media',
    ]

    members = public_members()
    if members:
        members_config = '    :members: ' + ', '.join(members)
        automodule_lines.append(members_config)

    automodule_lines.append('')
    rewritten_content.extend(automodule_lines)

    # Make the TOC tree hidden.
    toctree_elts = sorted(submod_lines + subpkg_lines)
    toctree_elts = ['   ' + elt for elt in toctree_elts]
    toctree_lines = ['.. toctree::', '   :hidden:', ''] + toctree_elts
    rewritten_content.extend(toctree_lines)

    # Add an empty string for a trailing newline.
    rewritten_content.append('')

    # Write the new content to a file.
    with open(INDEX_FILE, 'w') as file_obj:
        file_obj.write('\n'.join(rewritten_content))


def rewrite_common_rst():
    """Rewrite the index.rst file."""

    with open(COMMON_FILE, 'r') as file_obj:
        contents = file_obj.read()

    lines = contents.split('\n')

    expected_title = r'google.resumable\_media.common module'
    rewritten_title = '``google.resumable_media.common``'
    rewritten_content = rewrite_title(lines, expected_title, rewritten_title)
    rewritten_content.extend(lines[2:])

    # Write the new content to a file.
    with open(COMMON_FILE, 'w') as file_obj:
        file_obj.write('\n'.join(rewritten_content))


def main():
    rewrite_index_rst()
    rewrite_common_rst()


if __name__ == '__main__':
    main()
